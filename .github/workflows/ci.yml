name: CI - Build and Test

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.24.5'
  AWS_REGION: us-east-1

jobs:
  # Job 1: Lint e valida√ß√£o de c√≥digo
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: golangci-lint run ./...

  # Job 2: Testes unit√°rios
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  # Job 3: Build e valida√ß√£o do Docker
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      build-success: ${{ steps.build.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build
        run: |
          set -euo pipefail
          echo "üê≥ Building Docker image..."

          # Build da imagem com platform espec√≠fica para Lambda
          docker build \
            --platform linux/amd64 \
            --tag test-image:${{ github.sha }} \
            --load \
            .

          # Verificar se a imagem foi criada com sucesso
          if docker images test-image:${{ github.sha }} --format "table {{.Repository}}:{{.Tag}}" | grep -q test-image:${{ github.sha }}; then
            echo "‚úÖ Docker image built successfully"
            echo "success=true" >> "$GITHUB_OUTPUT"
            
            # Obter o digest da imagem
            DIGEST=$(docker inspect test-image:${{ github.sha }} --format='{{index .RepoDigests 0}}' 2>/dev/null || echo "local-build")
            echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Docker image build failed"
            echo "success=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: Test Docker image locally
        run: |
          set -euo pipefail
          echo "üß™ Testing Docker image locally..."

          # Executar um teste b√°sico da imagem
          # Nota: Como √© uma imagem Lambda, vamos apenas verificar se ela inicia
          docker run --rm test-image:${{ github.sha }} echo "Container test passed" || {
            echo "‚ùå Container test failed"
            exit 1
          }

      - name: Validate Terraform syntax
        run: |
          set -euo pipefail
          echo "üîç Validating Terraform syntax..."

          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform

          # Validate Terraform files
          cd terraform
          terraform init -backend=false
          terraform validate
          terraform fmt -check

  # Job 4: An√°lise de seguran√ßa
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: needs.build.outputs.build-success == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 5: Relat√≥rio final do CI
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: always()
    steps:
      - name: Check CI status
        run: |
          set -euo pipefail
          echo "=== CI RESULTS ==="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"

          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" ]]; then
            echo "‚úÖ All CI checks passed! Ready for deployment."
            exit 0
          else
            echo "‚ùå Some CI checks failed. Deployment will be blocked."
            exit 1
          fi
